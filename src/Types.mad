import type {Wish} from "Wish"

export alias UID = Integer

export type WorldError id
  = ErrorMaze(id) 
  | ErrorEntity(id)
  | ErrorPlace(id)
  | UnknownWorldError

export type Event a
  = EventAction(a)
  | EventEntity(a)
  | EventPlace(a)
  | UnknownEvent


export type Action a b c
  = Command(a, b, c)
  | InvalidAction(a, b)
  | UnknownAction

export alias StandardAction a = Action UID String (Event a)

export alias Actionable actionType = {
  actions :: List (StandardAction actionType)
}

export type Character name soul
  = Player(name, soul)
  | NPC(name, soul)
  | Spirit(name, soul)
  | UnknownCharacter

export type WorldObject name data
  = Thing(name, data)
  | Space(name, data)
  | UnknownWorldObject

export type Entity = Character | WorldObject

export alias RecordPlace = {
  name :: String,
  objects :: List (Entity)
}

export type Place name raw
  = Location(name, raw)
  | UnknownPlace

export type Tile x y data
  = Wall(x, y, data)
  | Floor(x, y, data)
  | Door(x, y, data)
  | Hazard(x, y, data)
  | InvalidTile

export alias CartesianTile a = Tile Integer Integer a

export alias TileNeighbors a = {
  n  :: CartesianTile a,
  ne :: CartesianTile a,
  e  :: CartesianTile a,
  se :: CartesianTile a,
  s  :: CartesianTile a,
  sw :: CartesianTile a,
  w  :: CartesianTile a,
  nw :: CartesianTile a
}

export type Room x y w h data
  = Room(x, y, w, h, data)

export alias StandardRoom data = Room Integer Integer Integer Integer data

export alias DungeonRooms r = List (StandardRoom r)
export alias DungeonTiles t = List (List (CartesianTile t))

export alias RecordDungeon r t = {
  rooms :: DungeonRooms r,
  tiles :: DungeonTiles t
}

export type Dungeon width height rooms tiles = Dungeon(width, height, rooms, tiles)

export alias BoundingBox = {
  top    :: Integer,
  right  :: Integer,
  bottom :: Integer,
  left   :: Integer
}

export alias RecordConfig = {
  width               :: Integer,
  height              :: Integer,
  roomAttempts        :: Integer,
  roomConnectorChance :: Float,
  roomSizeModifier    :: Integer,
  walkWinding         :: Float
}

export alias RecordSeededConfig = {
  ...RecordConfig,
  seed :: String
}
