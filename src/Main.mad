// import IO from "IO"

import {Command, getActionName} from "@/Action"
import { canDo, toSpirit, NPC } from "@/Character"
import {Dungeon, makeDungeonFromSeed, renderDungeon, growMaze} from "@/Dungeon"
import {EventAction} from "@/Event"
import {} from "@/Math"
import {colortrace, text} from "@/Log"
import {makeTwister} from "@/Unusual"
import {toString} from "@/String"

red = colortrace(text.red)
cyan = colortrace(text.cyan)
yellow= colortrace(text.yellow)

sleep = Command(1, "sleep", EventAction("sleep"))
run = Command(2, "run", EventAction("run"))
jimmy = NPC("jimmy", {actions: [sleep, run]})

u = makeTwister("cooool")

red("jimmy - an NPC", jimmy)
red("jimmy - spirit?", toSpirit(jimmy))
red("jimmy - can sleep?", canDo("sleep", jimmy))
red("jimmy - can sleep2?", canDo(getActionName(sleep), jimmy))
red("jimmy - can run?", canDo("run", jimmy))
red("jimmy - can gallop?", canDo("gallop", jimmy))
cyan("unusual - do you like, to do the twist?", u.shuffle(["alpha", "beta", "gamma"]))
cyan("unusual - do you like, to do the twist?", u.shuffle(["alpha", "beta", "gamma"]) |> u.shuffle |> u.shuffle)
cyan("unusual - do you like, to do the twist?", u.pick(["one", "two", "three", "four", "five", "six"]))


i = u.integer({min: 0, max: 200})
cyan("i - what?", i)

origin :: Integer -> Integer -> #[Integer, Integer]
origin = (w, h) => #[
  u.integer({min: 0, max: w}),
  u.integer({min: 0, max: h})
]

WIDTH = 20
HEIGHT = 20

start = origin(WIDTH, HEIGHT)
yellow("origin - where?", start)

chaos = #- Date.now() -#
// chaos = 420
dungeon = makeDungeonFromSeed(toString(chaos))
// red("dungeon - huh", dungeon)
// red("dungeon - render", (where { Dungeon(w, h, _, _) => w ++ " x " ++ h })(dungeon))
dotRooms = (where { Dungeon(_, _, rooms, _) => rooms })
red("dungeon - rooms", dotRooms(dungeon))
dungeon2 = growMaze(dungeon, start)
#- console.log(renderDungeon(dungeon)) -#
