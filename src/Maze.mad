import type {BoundingBox} from "@/Geometry"
import type {StandardRoom} from "@/Room"
import {Room} from "@/Room"

getBoundingBox :: StandardRoom a -> BoundingBox
export getBoundingBox = (
  where {
    Room(x, y, w, h, data) => ({
      top: y,
      bottom: y + h - 1 ,
      left: x,
      right: x + w - 1
    })
  }
)

roomContainsTile :: StandardRoom a -> Integer -> Integer -> Boolean
export roomContainsTile = (room, x, y) => pipe(
  getBoundingBox,
  (bb) => !(
    x < bb.left   ||
    x > bb.right  ||
    y < bb.top    ||
    y > bb.bottom
  )
)(room)

roomIntersectsRoom :: StandardRoom a -> StandardRoom b -> Boolean
export roomIntersectsRoom = (a, b) => {
  m = getBoundingBox(a)
  n = getBoundingBox(b)
  return !(
    m.left   > n.right  ||
    m.right  < n.left   ||
    m.top    > n.bottom ||
    m.bottom < n.top
  )
}
